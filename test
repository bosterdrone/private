local Debug = false -- Set this to true if you want my debug output.
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 9e9)
local Balls = workspace:WaitForChild("Balls", 9e9)

-- Functions

local function print(...) -- Debug print.
  if Debug then
    warn(...)
  end
end

local function VerifyBall(Ball)
  return typeof(Ball) == "Instance" and Ball:IsA("BasePart") and Ball:IsDescendantOf(Balls) and Ball:GetAttribute("realBall") == true
end

local function IsTarget()
  return Player.Character and Player.Character:FindFirstChild("Highlight")
end

local function Parry()
  Remotes:WaitForChild("ParryButtonPress"):Fire()
end

-- Visual Hitbox
local SphereHitbox = Instance.new("Part")
SphereHitbox.Name = "VisualViewPart"
SphereHitbox.Parent = workspace
SphereHitbox.Color = Color3.new(0.92549, 0.831373, 1)
SphereHitbox.Shape = Enum.PartType.Ball
SphereHitbox.CanCollide = false
SphereHitbox.Anchored = true
SphereHitbox.CastShadow = false
SphereHitbox.Transparency = 0.2
SphereHitbox.Material = "ForceField"
SphereHitbox.Size = Vector3.new(13, 13, 13)

-- Ball detection and early parry
Balls.ChildAdded:Connect(function(Ball)
  if not VerifyBall(Ball) then
    return
  end

  print("Ball Spawned:", Ball)

  local OldPosition = Ball.Position
  local OldTick = tick()

  Ball:GetPropertyChangedSignal("Position"):Connect(function()
    if IsTarget() then
      local Distance = (Ball.Position - workspace.CurrentCamera.Focus.Position).Magnitude
      local Velocity = (OldPosition - Ball.Position).Magnitude

      print("Distance:", Distance, "\nVelocity:", Velocity, "\nTime:", Distance / Velocity)

      if (Distance / Velocity) <= 10 then
        Parry()
      end
    end

    if (tick() - OldTick >= 1/60) then
      OldTick = tick()
      OldPosition = Ball.Position
    end
  end)
end)

-- Visual Hitbox update coroutine
coroutine.wrap(function()
  while true do
    task.wait()
    pcall(function()
      local LocalPlayer = game.Players.LocalPlayer
      local Balls = workspace:WaitForChild("Balls", 20)
      local Ball = Balls:FindFirstChildOfClass("Part") 

      if Ball then
        local Calculate = Ball.Velocity.Magnitude / 4
        SphereHitbox.Size = Vector3.new(Calculate, Calculate, Calculate)
        SphereHitbox.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
      end
    end)
  end
end)()
